Ashish Kadka
Micah Most
Mitch Bitzan
Tim Olson

CSCI 411
Project 2 - Group Project


Table Create
-------------------------------

   CREATE TABLE Person (
     pid number default NULL,
     pname varchar2(30) default NULL,
     email varchar2(50) default NULL,
     PRIMARY KEY (pid)
   );

   CREATE TABLE Author (
     pid number NOT NULL references person(pid),
     PRIMARY KEY (pid)
   );

   CREATE TABLE Editor (
     pid number NOT NULL references person(pid),
     PRIMARY KEY (pid)
   );

   CREATE TABLE Publishing_Company (
     pcid number default NULL,
     pcname varchar2(80) default NULL,
     phone varchar2(20) default NULL,
     PRIMARY KEY (pcid)
   );

   CREATE TABLE Address (
     street varchar2(50) NOT NULL,
     city varchar2(30) NOT NULL,
     state varchar2(20) NOT NULL,
     PRIMARY KEY (street, city, state)
   );

   CREATE TABLE Subscription (
     sid varchar2(11),
     slen number,
     begin_date date,
     fee varchar2(10) default NULL,
     PRIMARY KEY (sid)
   );

   CREATE TABLE Users (
     pid number NOT NULL references person(pid),
     uname varchar2(30),
     PRIMARY KEY (pid)
   );

   CREATE TABLE Viewer (
     vid number default NULL,
     PRIMARY KEY (vid)
   );

   CREATE TABLE Catalog_item (
     catid varchar2(10),
     contract_term date,
     type varchar2(25),
     PRIMARY KEY (catid)
   );

   CREATE TABLE Journal (
     jid varchar2(10),
     jtitle varchar2(80),
     jvol number,
     content varchar2(80),
     PRIMARY KEY (jid),
     FOREIGN KEY (jid) references Catalog_item(catid) ON DELETE CASCADE );

   CREATE TABLE Magazine (
     mid varchar2(10),
     mtitle varchar2(80),
     jvol number,
     content varchar2(80),
     PRIMARY KEY (mid),
     FOREIGN KEY (mid) references Catalog_item(catid) ON DELETE CASCADE );

   CREATE TABLE Book (
     bid varchar2(10),
     btitle varchar2(80),
     edition number,
     content varchar2(80),
     PRIMARY KEY (bid),
     FOREIGN KEY (bid) references Catalog_item(catid) ON DELETE CASCADE );

   CREATE TABLE Conference_proceedings (
     cid varchar2(10),
     cptitle varchar2(150),
     content varchar2(80),
     PRIMARY KEY (cid),
     FOREIGN KEY (cid) references Catalog_item(catid) ON DELETE CASCADE );


   CREATE TABLE Reference (
     catid varchar2(10),
     cite_id varchar2(10),
     PRIMARY KEY (catid, cite_id),
     FOREIGN KEY (catid) references Catalog_item ON DELETE CASCADE );

   CREATE TABLE Creates (
     vid  number,
     pid  number,
     sid  varchar2(20) NOT NULL,
     PRIMARY KEY (vid, sid, pid),
     FOREIGN KEY (vid) references Viewer,
     FOREIGN KEY (sid) references Subscription,
     FOREIGN KEY (pid) references Users );

   CREATE TABLE Search (
     vid number NOT NULL,
     catid varchar2(10),
     PRIMARY KEY (vid, catid),
     FOREIGN KEY (vid) references Viewer,
     FOREIGN KEY (catid) references Catalog_item ON DELETE CASCADE );

   CREATE TABLE Retrieve (
     pid number,
     catid varchar2(10),
     r_date date,
     PRIMARY KEY (pid, catid, r_date),
     FOREIGN KEY (pid) references Users,
     FOREIGN KEY (catid) references Catalog_item ON DELETE CASCADE );

   CREATE TABLE Writes (
     catid varchar2(10) NOT NULL,
     pid number NOT NULL,
     PRIMARY KEY (catid, pid),
     FOREIGN KEY (catid) references Catalog_item ON DELETE CASCADE,
     FOREIGN KEY (pid) references Author );

   CREATE TABLE Edits (
     catid varchar2(10) NOT NULL,
     pid number NOT NULL,
     PRIMARY KEY (catid, pid),
     FOREIGN KEY (catid) references Catalog_item ON DELETE CASCADE,
     FOREIGN KEY (pid) references Editor );


   CREATE TABLE Publishes (
     catid varchar2(10) NOT NULL,
     pcid number NOT NULL,
     publish_date date,
     PRIMARY KEY (catid, pcid),
     FOREIGN KEY (catid) references Catalog_item ON DELETE CASCADE,
     FOREIGN KEY (pcid) references Publishing_Company );


   CREATE TABLE Located_at (
     pcid number NOT NULL,
     street varchar2(50) NOT NULL,
     city varchar2(30) NOT NULL,
     state varchar2(20) NOT NULL,
     PRIMARY KEY (pcid, street, city, state),
     FOREIGN KEY (pcid) references Publishing_Company,
     FOREIGN KEY (street, city, state) references Address );

   CREATE TABLE Lives_At (
     pid number NOT NULL,
     street varchar2(50) NOT NULL,
     city varchar2(30) NOT NULL,
     state varchar2(20) NOT NULL,
     PRIMARY KEY (pid, street, city, state),
     FOREIGN KEY (pid) references Person,
     FOREIGN KEY (street, city, state) references Address );


Insertion of Data
-------------------------------

   Person
   INSERT INTO Person (pid,pname,email) ->
      102,'Graiden Wilkins','mauris.eu@convallisconvallis.ca'
      103,'Brandon Horton','luctus.aliquet@ametrisusDonec.ca'
      106,'Drew Lott','pharetra.nibh.Aliquam@posuerevulputate.co.uk'
      107,'Michelle Farley','sem.semper@quisdiamluctus.net'
      108,'Reese Harper','magna.Nam@metus.co.uk'
      117,'Talon Shelton','molestie.sodales@Proinnonmassa.com'
      118,'Donald Hamnes','dohamnes@stcloudstate.edu'
      119,'Stephanie Gordon','libero.lacus@sagittis.org'
      120,'Jacob Wheeler','quam.a.felis@morbitristiquesenectus.ca'
      121,'Victoria Holder','mollis@Nunc.net'
      122,'Aspen Ayala','dolor.Donec@vitaemaurissit.net'
      123,'Melissa Hernandez','laoreet.lectus.quis@non.co.uk'
      124,'Bertha Santos','porta.elit@blanditat.org'
      125,'Barbara Page','erat.Etiam@mollis.edu'
      126,'Iliana Peterson','luctus.ipsum@scelerisque.com'
      130,'Conan Johns','sagittis.felis@Suspendisseseddolor.edu'
      131,'Candice Clemons','nascetur.ridiculus.mus@eueuismod.com'
      134,'Patricia Curtis','lorem.eget@lobortisrisus.org'
      135,'Neil Knowles','interdum@rhoncusProin.com'
      141,'Olga Martinez','pede@Vivamussitamet.ca'
      142,'Upton Booker','sit.amet@eratneque.edu'
      145,'Alyssa Gilmore','erat.Vivamus.nisi@ipsumnon.edu'
      146,'Logan Oneil','leo.Cras@rhoncus.org'
      147,'Bryant A. Julstrom','julstrom@stcloudstate.edu'
      150,'Yolanda Glover','arcu@ipsum.co.uk'
      151,'Charity Stevens','vestibulum.lorem@necorciDonec.ca'
      152,'Allen Carr','nisi.Mauris@mauriseu.edu'
      153,'Alexa Thomas','Proin.nisl@adlitora.net'

   Author
   INSERT INTO Author (pid) ->
      102
      103
      117
      118
      119
      120
      121
      122
      123
      124
      125
      126
      130
      141
      142
      145
      146
      147
      150
      151
      152
      153

   Editor
   INSERT INTO Editor (pid) ->
      102
      103
      106
      107
      108
      117
      130
      131
      134
      135


--Publishing Company
   INSERT INTO Publishing_Company (pcid,pcname,phone) ->
      37270,'African Zoology','(923) 220-2258'
      45671,'Pacific Historical Review','(303) 730-6120'
      27542,'Energy and Environment','(375) 226-9301'
      87623,'Ancient Philosophy','(801) 498-2467'
      12076,'Journal of Herpetology','(672) 912-7717'
      31677,'International Journal of Engineering Science','(376) 472-0107'
      17588,'GeoArabia','(860) 763-0417'
      15470,'Readers Digest','(267) 683-1872'
      77523,'Foreign Policy','(339) 542-0730'
      73864,'Bon Appétit','(816) 349-2982'
      02585,'Forbes','(978) 865-6009'
      79566,'The Family Handyman','(773) 303-7520'
      20527,'Harper and Brothers','(220) 649-5445'
      75892,'Nanhai','(533) 772-6290'
      85680,'Secker and Warburg','(573) 264-7543'
      00451,'Thomas Cautley Newby','(269) 196-7609'
      45762,'Hogarth Press','(126) 751-6855'
      73243,'Heinemann','(481) 961-9895'
      28954,'Louisiana State University Press','(802) 934-0834'
      44641,'Verlag Die Schmiede','(437) 382-7361'
      76522,'Faber and Faber','(651) 960-7610'
      14891,'Gerald Duckworth and Company Ltd','(429) 359-7754'
      98567,'Penguin Books','(561) 716-4054'
      25228,'Charles Scribners Sons','(592) 751-1010'
      45629,'IASTED International Conference on Artificial Intelligence and Applications','(557) 247-1698'
      12354,'Structures Congress','(356) 547-1618'
      03485,'Association of Energy Engineers','(877) 243-1621'
      15587,'28th Chinese Control and Decision Conference','(908) 217-1888'

   Address
   INSERT INTO Address (street,city,state) ->
      '723 Imperdiet, St.','Dublin','Pennsylvania'
      'Ap #426-3290 Arcu. Road','Arquata del Tronto','Minnesota'
      'Ap #983-1695 Sagittis. St.','Orai','Minnesota'
      '777-7445 Non Avenue','Wodonga','Nebraska'
      '591-127 Id, Avenue','Dublin','Pennsylvania'
      '784-5985 Magna. Avenue','Cáceres','Nebraska'
      '3200 Quisque St.','Waitara','Minnesota'
      '5976 In St.','Morvi','Minnesota'
      '8043 Eu Rd.','Hattiesburg','Mississippi'
      'Ap #142-5999 In, St.','Istanbul','Delaware'
      '823-6082 Aliquet Street','Münster','Nebraska'
      '5663 Ut St.','Täby','Nebraska'
      '986-6598 A, St.','Southend','Nebraska'
      '384-4624 Id, Ave','Castelló','Minnesota'
      'Ap #811-9645 Luctus. St.','Newark','Minnesota'
      '3551 Donec Rd.','Kapiti','Wyoming'
      '837-2305 Elementum Ave','Vienna','Nebraska'
      'P.O. Box 729, 5301 Pede Av.','Bulandshahr','Nebraska'
      'P.O. Box 534, 5001 Gravida. St.','Taupo','South Carolina'
      'Ap #361-8040 Vitae Av.','Cache Creek','New Hampshire'
      'P.O. Box 277, 6619 Tincidunt Av.','Liberia','Hawaii'
      'Ap #624-9680 Donec Ave','Barranca','New Hampshire'
      'P.O. Box 190, 9744 Auctor. St.','Haarlem','Maryland'
      'P.O. Box 232, 5659 Sed Avenue','Tarnów','Maryland'
      '703-9416 Semper St.','Borno','Michigan'
      '6850 Pharetra. St.','Shreveport','Colorado'
      'Ap #473-9604 Phasellus Street','Columbia','Minnesota'
      'Ap #468-2092 Ac, Rd.','Silchar','Minnesota'
      '5609 Auctor Street','Berlin','Minnesota'
      '946-7062 Nulla St.','Albacete','Minnesota'
      'P.O. Box 194, 6625 Pede, Street','Värnamo','Minnesota'
      '243 Lacus. Rd.','Dollard-des-Ormeaux','Quebec'
      'Ap #757-4829 Malesuada Avenue','Acireale','Minnesota'
      '192-9330 In St.','Stamford','Connecticut'
      '318-3010 Mauris Street','Whitewater Region Township','Ontario'
      '2205 Mollis. Rd.','Kızılcahamam','Ontario'
      'P.O. Box 249, 6195 Ultrices Av.','Åkersberga','Ontario'
      '9787 Risus. St.','Batiscan','Minnesota'
      'P.O. Box 664, 6374 Ornare. St.','Martigues','Minnesota'
      'Ap #599-5532 Quis, Road','Ankara','Minnesota'
      '8108 Elit, Street','Flushing','Texas'
      'Ap #859-3812 Lorem St.','Ajax','Texas'
      '8127 Nullam Ave','Vienna','Nebraska'
      'P.O. Box 929, 3642 Arcu. Rd.','Foz do Iguaçu','Rhode Island'
      '157-7287 Ipsum St.','Tilburg','Mississippi'
      'Ap #557-8932 Eu Rd.','Heerhugowaard','Nebraska'
      'P.O. Box 892, 8153 Elementum Av.','Cornwall','Ontario'
      'P.O. Box 134, 8836 Eu Rd.','Pero','Nebraska'
      '4409 Nulla St.','Boo','Nebraska'
      '936-1974 Non, Avenue','Mataró','Colorado'
      '9147 Nec Rd.','Coltauco','Rhode Island'
      '625-4729 Ipsum Road','Châtellerault','Delaware'

   Subscription
   INSERT INTO Subscription (sid,slen,begin_date,fee) ->
      'HTC81ARU6VV',12,'19-Nov-2019','$700'
      'JZK68EZI9CN',23,'19-Apr-2019','$1320'
      'LAY62ERU4CX',12,'23-Sep-2023','$700'
      'MRN33QSD9ZS',3,'10-Jun-2010','$900'
      'AYG49JID9QS',2,'24-May-2024','$900'
      'ULB07XAU1AJ',8,'21-Jan-2021','$700'
      'DGK38CIH5HH',18,'05-Jan-2005','$500'
      'NNP32LKF4VK',12,'07-Sep-2007','$700'
      'QWE93IZB7XI',8,'31-Aug-2031','$900'
      'ALC68UVE0WM',12,'27-Oct-2027','$700'

   User
   INSERT INTO Users (uname,pid) ->
      'gwilkins',102
      'rharper',108
      'tshelton',117
      'dhamnes',118
      'jwheeler',120
      'vholder',121
      'bsantos',124
      'bpage',125
      'ipeterson',126
      'omartinez',141

   Viewer
   INSERT INTO Viewer (vid) ->
      200
      205
      210
      215
      220
      225
      230
      235
      240
      245
      250
      255
      260
      265
      270
      275
      280
      285
      290
      295
      300

   Catalog_item
   INSERT INTO Catalog_item (catid,contract_term,type) ->
      'IXUU3646','06-Nov-2038','Book'
      'KQZJ4175','25-May-2050','Conference_proceedings'
      'ZLYG9928','12-Nov-2022','Magazine'
      'VXWY8161','22-Jun-2020','Conference_proceedings'
      'UENO6668','12-Apr-2037','Magazine'
      'IBNV2946','31-Mar-2028','Book'
      'BKGN1857','30-Nov-2025','Conference_proceedings'
      'NJEQ6977','25-Jan-2005','Book'
      'LHHD8542','24-Dec-2051','Book'
      'IXNJ8371','26-Sep-2029','Conference_proceedings'
      'YZAQ6317','29-Jan-2034','Journal'
      'CEVT7059','23-Feb-2054','Book'
      'ABIQ2755','03-Jul-2012','Journal'
      'RYMF2195','25-Jun-2052','Magazine'
      'QEDL4413','07-Mar-2039','Book'
      'OVKQ3250','05-Jan-2038','Journal'
      'VMGS7843','22-May-2011','Book'
      'HZLE2432','11-Nov-2031','Book'
      'ITCL7144','26-Sep-2037','Conference_proceedings'
      'ZNMF0012','02-Nov-2016','Journal'
      'RHBY3015','07-Aug-2060','Magazine'
      'NSYD3340','01-Jan-2044','Journal'
      'ESCF0068','29-Feb-2048','Magazine'
      'HPNL1208','23-Aug-2027','Magazine'
      'HCEE1463','07-Jan-2033','Journal'
      'LQVR8230','02-Apr-2023','Book'
      'VOTV6503','05-Jul-2036','Book'
      'TSOW8238','21-Sep-2055','Journal'
      'ERRZ8161','24-Mar-2060','Journal'
      'VDNT9283','09-Jul-2048','Book'
      'SQXZ1306','01-Sep-2049','Book'
      'YQHH6457','21-Dec-2030','Magazine'
      'NPPH3852','27-Jan-2033','Journal'

   Journal
   INSERT INTO Journal (jid,jtitle,jvol,content) ->
      'YZAQ6317','Potential of Native Organic Feeding Stuffs in Poultry Production',
         28,'the content of journal: Potential of Native...'
      'ABIQ2755','Water the Epic Struggle for Wealth, Power, and Civilization',
         79,'the content of journal: Water the Epic...'
      'OVKQ3250','Nebraskas Twin Cities',30,'the content of journal: Nebraskas Twin Cities'
      'ZNMF0012','The Role of Time and Time Perspective',19,'the content of journal: The Role of Time...'
      'NSYD3340','Serum Biochemistry of Lumpy Skin Disease Virus-Infected Cattle',
         55,'the content of journal: Serum Biochemistry of Lumpy...'
      'HCEE1463','Low-power Depth-based Descending Stair Detection for Smart Assistive Devices',
         75,'the content of journal: Low-power Depth-based...'
      'TSOW8238','LISP: A Southbound SDN Protocol?',5,'the content of journal: LISP: A Southbound SDN Protocol?'
      'ERRZ8161','Remarque en toy telle marque',73,'the content of journal: Remarque en toy telle marque'
      'NPPH3852','Dynamic Assessment of Exposure to Air Pollution Using Mobile Phone Data',
         52,'the content of journal: Dynamic Assessment of Exposure...'

   Magazine
   INSERT INTO Magazine (mid,mtitle,jvol,content) ->
      'ZLYG9928','10 Studies to Help Shape Your Health',73,'The content of magazine: 10 Studies to Help...'
      'UENO6668','Neurodegeneration: Cold shock protects the brain',99,'The content of magazine: Neurodegeneration...'
      'RYMF2195','Canadas History Society Annual Report 2015',62,'The content of magazine: Canadas History 2015...'
      'RHBY3015','Off-Grid Food Preservation',15,'The content of magazine: Off-Grid Food Preservation'
      'ESCF0068','Foods You Should (and Can) Produce Yourself and Why',
         38,'The content of magazine: Foods You Should Produce Yourself...'
      'HPNL1208','How is Bitcoin money',68,'The content of magazine: How is Bitcoin money'
      'YQHH6457','Can you change how you feel about money?',
         71,'The content of magazine: Can you change how you feel about money?'

   Book
   INSERT INTO Book (bid,btitle,edition,content) ->
      'IXUU3646','Moby-Dick',1,'The content of book: Moby-Dick'
      'IBNV2946','The Old Lady Who Swallowed a Fly',3,'The content of book: The Old Lady...'
      'LHHD8542','Animal Farm',1,'The content of book: Animal Farm'
      'NJEQ6977','Wuthering Heights',1,'The content of book: Wuthering Heights'
      'CEVT7059','Mrs Dalloway',2,'The content of book: Mrs Dalloway'
      'VMGS7843','The Bell Jar',2,'The content of book: The Bell Jar'
      'QEDL4413','A Confederacy of Dunces',8,'The content of book: A Confederacy of Dunces'
      'HZLE2432','The Trial',1,'The content of book: The Trial'
      'LQVR8230','Finnegans Wake',4,'The content of book: Finnegans Wake'
      'VOTV6503','Sons and Lovers',1,'The content of book: Sons and Lovers'
      'VDNT9283','Gravitys Rainbow',3,'The content of book: Gravitys Rainbow'
      'SQXZ1306','The Old Man and the Sea',3,'The content of book: The Old Man...'

   Conference_proceedings
   INSERT INTO Conference_proceedings (cid,cptitle,content) ->
      'KQZJ4175','Iterated mutation in an evolutionary algorithm for Sudoku','The content of proceeding: Iterated mutation...'
      'VXWY8161','Probabilistic neural networks structure optimization through genetic algorithms for recognizing
         faces under illumination variations','The content of proceeding: Probabilistic neural...'
      'BKGN1857','Wind Power Plant Prediction by Using Neural Networks','The content of proceeding: Wind Power Plant
         Prediction...'
      'IXNJ8371','CFD analysis of pre-cooling water spray system in natural draft dry cooling towers','The content of
         proceeding: CFD analysis of pre-cooling...'
      'ITCL7144','Host computer software design of MAA hydrolysis reaction based on WINCC configuration software','The content
         of proceeding: Host computer software...'

   Publishes
   INSERT INTO Publishes (catid,pcid,publish_date) ->
      'YZAQ6317',37270,'31-DEC-1998'
      'ABIQ2755',45671,'14-DEC-2002'
      'OVKQ3250',27542,'25-JAN-1967'
      'ZNMF0012',87623,'16-MAR-2009'
      'NSYD3340',12076,'13-FEB-1994'
      'HCEE1463',31677,'22-FEB-2000'
      'TSOW8238',31677,'30-JAN-1992'
      'ERRZ8161',17588,'09-JUN-2014'
      'NPPH3852',31677,'23-FEB-1980'
      'ZLYG9928',15470,'12-JAN-2000'
      'UENO6668',15470,'03-DEC-2003'
      'RYMF2195',77523,'09-JUN-2014'
      'RHBY3015',73864,'14-DEC-2002'
      'ESCF0068',73864,'26-FEB-2000'
      'HPNL1208',02585,'04-FEB-2011'
      'YQHH6457',79566,'17-FEB-1982'
      'IXUU3646',20527,'28-FEB-1990'
      'IBNV2946',75892,'18-DEC-1994'
      'LHHD8542',85680,'27-JUL-1968'
      'NJEQ6977',00451,'14-DEC-2002'
      'CEVT7059',45762,'30-JUL-1994'
      'VMGS7843',73243,'14-JUN-2011'
      'QEDL4413',28954,'14-DEC-2002'
      'HZLE2432',44641,'02-JUN-2003'
      'LQVR8230',76522,'02-DEC-1994'
      'VOTV6503',14891,'01-JAN-1997'
      'VDNT9283',98567,'12-MAR-1999'
      'SQXZ1306',25228,'09-JUN-2014'
      'KQZJ4175',45629,'18-JUN-2008'
      'VXWY8161',45629,'09-JUN-2014'
      'BKGN1857',12354,'28-MAR-2015'
      'IXNJ8371',03485,'23-JAN-1996'
      'ITCL7144',15587,'22-JAN-2016'

   Edits
   INSERT INTO Edits (catid,pid) ->
      'YZAQ6317',102
      'ABIQ2755',106
      'OVKQ3250',107
      'ZNMF0012',107
      'NSYD3340',117
      'HCEE1463',130
      'TSOW8238',103
      'ERRZ8161',102
      'NPPH3852',103
      'ZLYG9928',106
      'UENO6668',106
      'RYMF2195',117
      'RHBY3015',131
      'ESCF0068',135
      'HPNL1208',107
      'YQHH6457',135
      'IXUU3646',103
      'IBNV2946',102
      'LHHD8542',135
      'NJEQ6977',135
      'CEVT7059',117
      'VMGS7843',135
      'QEDL4413',102
      'HZLE2432',135
      'LQVR8230',134
      'VOTV6503',131
      'VDNT9283',103
      'SQXZ1306',130
      'KQZJ4175',108
      'VXWY8161',108
      'BKGN1857',107
      'IXNJ8371',117
      'ITCL7144',103

   Writes
   INSERT INTO Writes (catid,pid) ->
      'YZAQ6317',122
      'ABIQ2755',145
      'OVKQ3250',147
      'ZNMF0012',146
      'NSYD3340',103
      'HCEE1463',103
      'TSOW8238',126
      'ERRZ8161',126
      'ERRZ8161',122
      'ERRZ8161',146
      'NPPH3852',146
      'ZLYG9928',102
      'UENO6668',119
      'RYMF2195',121
      'RHBY3015',141
      'RHBY3015',103
      'ESCF0068',152
      'HPNL1208',153
      'YQHH6457',153
      'IXUU3646',102
      'IBNV2946',153
      'IBNV2946',152
      'LHHD8542',103
      'NJEQ6977',153
      'CEVT7059',152
      'VMGS7843',124
      'QEDL4413',117
      'HZLE2432',151
      'HZLE2432',103
      'HZLE2432',153
      'HZLE2432',120
      'LQVR8230',150
      'VOTV6503',147
      'VDNT9283',142
      'SQXZ1306',123
      'KQZJ4175',118
      'KQZJ4175',147
      'VXWY8161',130
      'BKGN1857',125
      'IXNJ8371',120
      'ITCL7144',120

   Reference
   INSERT INTO Reference (catid,cite_id) ->
      'YZAQ6317','TSOW8238'
      'ABIQ2755','IXUU3646'
      'TSOW8238','ZLYG9928'
      'ERRZ8161','NPPH3852'
      'ERRZ8161','YQHH6457'
      'ERRZ8161','IXUU3646'
      'ZLYG9928','ITCL7144'
      'UENO6668','ZLYG9928'
      'RYMF2195','ITCL7144'
      'RHBY3015','CEVT7059'
      'RHBY3015','VOTV6503'
      'RHBY3015','VXWY8161'
      'ESCF0068','ERRZ8161'
      'ESCF0068','YQHH6457'
      'IXUU3646','BKGN1857'
      'NJEQ6977','ESCF0068'
      'NJEQ6977','IXUU3646'
      'NJEQ6977','LHHD8542'
      'NJEQ6977','ZLYG9928'
      'QEDL4413','BKGN1857'
      'VOTV6503','BKGN1857'
      'SQXZ1306','VOTV6503'
      'SQXZ1306','ESCF0068'
      'IXNJ8371','NJEQ6977'

   Located_at
   INSERT INTO Located_at (pcid,street,city,state) ->
      15587,'6850 Pharetra. St.','Shreveport','Colorado'
      37270,'591-127 Id, Avenue','Dublin','Pennsylvania'
      45671,'Ap #468-2092 Ac, Rd.','Silchar','Minnesota'
      27542,'5609 Auctor Street','Berlin','Minnesota'
      87623,'823-6082 Aliquet Street','Münster','Nebraska'
      12076,'946-7062 Nulla St.','Albacete','Minnesota'
      31677,'P.O. Box 194, 6625 Pede, Street','Värnamo','Minnesota'
      17588,'243 Lacus. Rd.','Dollard-des-Ormeaux','Quebec'
      15470,'Ap #757-4829 Malesuada Avenue','Acireale','Minnesota'
      77523,'192-9330 In St.','Stamford','Connecticut'
      73864,'318-3010 Mauris Street','Whitewater Region Township','Ontario'
      02585,'2205 Mollis. Rd.','Kızılcahamam','Ontario'
      79566,'P.O. Box 249, 6195 Ultrices Av.','Åkersberga','Ontario'
      20527,'9787 Risus. St.','Batiscan','Minnesota'
      75892,'P.O. Box 664, 6374 Ornare. St.','Martigues','Minnesota'
      85680,'Ap #599-5532 Quis, Road','Ankara','Minnesota'
      00451,'8108 Elit, Street','Flushing','Texas'
      45762,'Ap #859-3812 Lorem St.','Ajax','Texas'
      73243,'8127 Nullam Ave','Vienna','Nebraska'
      28954,'P.O. Box 929, 3642 Arcu. Rd.','Foz do Iguaçu','Rhode Island'
      44641,'157-7287 Ipsum St.','Tilburg','Mississippi'
      76522,'Ap #557-8932 Eu Rd.','Heerhugowaard','Nebraska'
      14891,'P.O. Box 892, 8153 Elementum Av.','Cornwall','Ontario'
      98567,'P.O. Box 134, 8836 Eu Rd.','Pero','Nebraska'
      25228,'4409 Nulla St.','Boo','Nebraska'
      45629,'936-1974 Non, Avenue','Mataró','Colorado'
      12354,'9147 Nec Rd.','Coltauco','Rhode Island'
      03485,'625-4729 Ipsum Road','Châtellerault','Delaware'

   Lives_at
   INSERT INTO Lives_at (pid,street,city,state) ->
      102,'723 Imperdiet, St.','Dublin','Pennsylvania'
      103,'Ap #426-3290 Arcu. Road','Arquata del Tronto','Minnesota'
      106,'Ap #983-1695 Sagittis. St.','Orai','Minnesota'
      107,'777-7445 Non Avenue','Wodonga','Nebraska'
      108,'591-127 Id, Avenue','Dublin','Pennsylvania'
      117,'777-7445 Non Avenue','Wodonga','Nebraska'
      118,'784-5985 Magna. Avenue','Cáceres','Nebraska'
      119,'3200 Quisque St.','Waitara','Minnesota'
      120,'5976 In St.','Morvi','Minnesota'
      121,'243 Lacus. Rd.','Dollard-des-Ormeaux','Quebec'
      122,'8043 Eu Rd.','Hattiesburg','Mississippi'
      123,'Ap #142-5999 In, St.','Istanbul','Delaware'
      124,'823-6082 Aliquet Street','Münster','Nebraska'
      125,'5663 Ut St.','Täby','Nebraska'
      126,'986-6598 A, St.','Southend','Nebraska'
      130,'384-4624 Id, Ave','Castelló','Minnesota'
      131,'823-6082 Aliquet Street','Münster','Nebraska'
      134,'Ap #811-9645 Luctus. St.','Newark','Minnesota'
      135,'3551 Donec Rd.','Kapiti','Wyoming'
      141,'837-2305 Elementum Ave','Vienna','Nebraska'
      142,'P.O. Box 729, 5301 Pede Av.','Bulandshahr','Nebraska'
      145,'P.O. Box 534, 5001 Gravida. St.','Taupo','South Carolina'
      146,'Ap #361-8040 Vitae Av.','Cache Creek','New Hampshire'
      147,'P.O. Box 277, 6619 Tincidunt Av.','Liberia','Hawaii'
      150,'Ap #624-9680 Donec Ave','Barranca','New Hampshire'
      151,'P.O. Box 190, 9744 Auctor. St.','Haarlem','Maryland'
      152,'P.O. Box 232, 5659 Sed Avenue','Tarnów','Maryland'
      153,'703-9416 Semper St.','Borno','Michigan'

   Creates
   INSERT INTO Creates (vid,pid,sid) ->
      200,102,'HTC81ARU6VV'
      205,108,'JZK68EZI9CN'
      210,117,'LAY62ERU4CX'
      215,118,'MRN33QSD9ZS'
      220,120,'AYG49JID9QS'
      225,121,'ULB07XAU1AJ'
      230,124,'DGK38CIH5HH'
      235,125,'NNP32LKF4VK'
      240,126,'QWE93IZB7XI'
      245,141,'ALC68UVE0WM'

   Retrieves
   INSERT INTO Retrieve (pid,catid,r_date) ->
      120,'KQZJ4175','14-DEC-2002'
      108,'YZAQ6317','13-FEB-1994'
      102,'BKGN1857','12-JAN-2000'
      120,'KQZJ4175','30-JAN-1992'
      121,'UENO6668','12-JAN-2000'
      102,'ABIQ2755','09-JUN-2014'
      124,'YZAQ6317','17-FEB-1982'
      108,'NPPH3852','09-JUN-2014'
      141,'KQZJ4175','18-DEC-1994'
      141,'KQZJ4175','26-FEB-2000'
      118,'VDNT9283','28-FEB-1990'
      102,'RHBY3015','30-JUL-1994'
      117,'YZAQ6317','14-DEC-2002'
      108,'KQZJ4175','27-JUL-1968'
      118,'NSYD3340','18-DEC-1994'
      102,'HPNL1208','28-FEB-1990'
      118,'KQZJ4175','09-JUN-2014'
      117,'RHBY3015','23-FEB-1980'
      108,'HPNL1208','30-JAN-1992'

   Search
   INSERT INTO Search (vid,catid) ->
      255,'LHHD8542'
      230,'RHBY3015'
      230,'IXNJ8371'
      200,'BKGN1857'
      270,'LHHD8542'
      205,'NPPH3852'
      235,'RHBY3015'
      215,'SQXZ1306'
      300,'RHBY3015'
      280,'LHHD8542'
      285,'LHHD8542'
      270,'HPNL1208'
      265,'HPNL1208'
      270,'IXUU3646'
      300,'ITCL7144'
      285,'VDNT9283'
      265,'NSYD3340'


Basic Interactions
------------------------------

1) What is the range (in years) of the age of books in the library.

   SELECT temp.old as "Oldest Book", temp.new as "Newest Book", temp.new - temp.old as "Range"
   FROM
   (
     SELECT MIN(EXTRACT(year FROM P.publish_date)) as old, MAX(EXTRACT(year FROM P.publish_date)) as new
     FROM Book B, Catalog_item C, Publishes P
     WHERE B.bid = C.catid
     AND C.catid = P.catid
   ) temp;


   Oldest Book Newest Book      Range
   ----------- ----------- ----------
          1968        2014         46

   Justification:
   Books are selected by equijoining bid with catid. In order to get the range of ages of books,
   the oldest book is selected and then the newest one. The year published is extracted from
   the dates and then subtracted to find the range.


2) List the title and type of catalog item that were written and edited by the same person.

   COL title format a50

   SELECT B.btitle as "Title", temp.type
   FROM Book B,
   (
     SELECT C.catid, C.type
     FROM Catalog_item C, Writes W, Edits E
     WHERE W.pid = E.pid
     AND C.catid = W.catid
   ) temp
   WHERE temp.catid = B.bid
   UNION
   SELECT M.mtitle as "Title", temp.type
   FROM Magazine M,
   (
     SELECT C.catid, C.type
     FROM Catalog_item C, Writes W, Edits E
     WHERE W.pid = E.pid
     AND C.catid = W.catid
   ) temp
   WHERE temp.catid = M.mid
   UNION
   SELECT J.jtitle as "Title", temp.type
   FROM Journal J,
   (
     SELECT C.catid, C.type
     FROM Catalog_item C, Writes W, Edits E
     WHERE W.pid = E.pid
     AND C.catid = W.catid
   ) temp
   WHERE temp.catid = J.jid
   UNION
   SELECT C.cptitle as "Title", temp.type
   FROM Conference_proceedings C,
   (
     SELECT C.catid, C.type
     FROM Catalog_item C, Writes W, Edits E
     WHERE W.pid = E.pid
     AND C.catid = W.catid
   ) temp
   WHERE temp.catid = C.cid;

   Title                                              TYPE
   -------------------------------------------------- -------------------------
   10 Studies to Help Shape Your Health               Magazine
   A Confederacy of Dunces                            Book
   Animal Farm                                        Book
   Low-power Depth-based Descending Stair Detection f Journal
   or Smart Assistive Devices

   Moby-Dick                                          Book
   Off-Grid Food Preservation                         Magazine
   Probabilistic neural networks structure optimizati Conference_proceedings
   on through genetic algorithms for recognizing face
   s under illumination variations

   Serum Biochemistry of Lumpy Skin Disease Virus-Inf Journal
   ected Cattle

   The Trial                                          Book

   Justification
   The query starts by finding the catalog item that has been written and edited by the
   same person. It has to do this for each of the types of catalog item. Then
   the title and type of that catalog item is passed up the query, where all of the
   catalog items are then grouped together.


3) Give the year and number of publications for each type of catalog item, that had the highest number of
   publications for that catalog item.

   SELECT * FROM (
      SELECT EXTRACT(year FROM P.publish_date) as publish, COUNT(EXTRACT(year FROM P.publish_date)) as num, C.type
      FROM Book B, Publishes P, Catalog_item C
      WHERE B.bid = P.catid
      AND C.catid = B.bid
      GROUP BY (EXTRACT(year FROM P.publish_date), C.type)
      ORDER BY COUNT(EXTRACT(year FROM P.publish_date)) DESC
   )
   WHERE ROWNUM = 1
   UNION
   SELECT * FROM (
      SELECT EXTRACT(year FROM P.publish_date) as publish, COUNT(EXTRACT(year FROM P.publish_date)) as num, C.type
      FROM Journal J, Publishes P, Catalog_item C
      WHERE J.jid = P.catid
      AND C.catid = J.jid
      GROUP BY (EXTRACT(year FROM P.publish_date), C.type)
      ORDER BY COUNT(EXTRACT(year FROM P.publish_date)) DESC
   )
   WHERE ROWNUM = 1
   UNION
   SELECT * FROM (
      SELECT EXTRACT(year FROM P.publish_date) as publish, COUNT(EXTRACT(year FROM P.publish_date)) as num, C.type
      FROM Magazine M, Publishes P, Catalog_item C
      WHERE M.mid = P.catid
      AND C.catid = M.mid
      GROUP BY (EXTRACT(year FROM P.publish_date), C.type)
      ORDER BY COUNT(EXTRACT(year FROM P.publish_date)) DESC
   )
   WHERE ROWNUM = 1
   UNION
   SELECT * FROM (
      SELECT EXTRACT(year FROM P.publish_date) as publish, COUNT(EXTRACT(year FROM P.publish_date)) as num, C.type
      FROM Conference_proceedings C, Publishes P, Catalog_item C
      WHERE C.cid = P.catid
      AND C.catid = C.cid
      GROUP BY (EXTRACT(year FROM P.publish_date), C.type)
      ORDER BY COUNT(EXTRACT(year FROM P.publish_date)) DESC
   )
   WHERE ROWNUM = 1;

      PUBLISH        NUM TYPE
   ---------- ---------- -------------------------
         1994          3 Book
         1996          1 Conference_proceedings
         2000          2 Magazine
         2009          1 Journal

   Justification:
   In order to get the largest number of publications for a catalog item in a given year
   the year is first extracted from the date of the publications. Then catalog item is
   grouped according to the year. Then it is ordered by the count of the publications that
   share a similar year. This is done for all four types of catalog items. The results
   are UNION'ed because there will be one result from each sub-query.


4) List the names and full addresses of people who live at the same location as a publishing company,
   as well as the name of the company located at that address.

   SELECT P.pname as person, L.street, L.city, L.state, C.pcname as "Publish Company"
   FROM Lives_at L, Person P, Located_at A, Publishing_company C
   WHERE P.pid = L.pid
   AND C.pcid = A.pcid
   AND L.street = A.street
   AND L.city = A.city
   AND L.state = A.state;

   PERSON              STREET                      CITY                     STATE            PUBLISH COMPANY
   ------------------- --------------------------- ------------------------ ---------------- --------------------
   Victoria Holder     243 Lacus. Rd.              Dollard-des-Ormeaux      Quebec           GeoArabia
   Reese Harper        591-127 Id, Avenue          Dublin                   Pennsylvania     African Zoology
   Candice Clemons     823-6082 Aliquet Street     M??nster                 Nebraska         Ancient Philosophy
   Bertha Santos       823-6082 Aliquet Street     M??nster                 Nebraska         Ancient Philosophy

   Justification:
   Starting with person, we have to associate each one with their address. Then the same thing
   is done to find the location of each publishing company. Finally, the full addresses
   (street, city and state) are compared and matches are selected.


5) List the titles of Magazines and Journals that were published in the same year.

   COL Journal format a50
   COL Magazine format a50

   SELECT DISTINCT EXTRACT(year FROM P1.publish_date) as "Publish year", J.jtitle as Journal, M.mtitle as Magazine
   FROM Catalog_item C, Publishes P1, Publishes P2, Journal J, Magazine M
   WHERE P1.catid = J.jid
   AND P2.catid = M.mid
   AND P1.publish_date = P2.publish_date;

   Publish year JOURNAL                                            MAGAZINE
   ------------ -------------------------------------------------- ----------------------------------------------
           2014 Remarque en toy telle marque                       Canadas History Society Annual Report 2015
           2002 Water the Epic Struggle for Wealth, Power, and Civ Off-Grid Food Preservation
                ilization

   Justification:
   First, Journal and Magazine catalog types are selected. Then those which have the same date
   are selected, producing ones that where published in the same year.


6) Report the catalog item which has been refernced the most.

   SELECT * FROM (
      SELECT R.catid, COUNT(R.catid) as num
      FROM Reference R
      GROUP BY R.catid
      ORDER BY COUNT(R.catid) DESC
   )
   WHERE ROWNUM = 1;

   CATID             NUM
   ---------- ----------
   NJEQ6977            4

   Justification:
   The catalog items in the referenced table are grouped by catid.
   Then all we have to do is order by the count of catid and report the
   top row.

7) Give the name and phone number of the publishing company who has published the most
   conference proceedings.

   SELECT * FROM (
      SELECT PC.pcname, PC.phone
      FROM Publishes P, Conference_proceedings C, Publishing_company PC
      WHERE P.catid = C.cid
      AND PC.pcid = P.pcid
      GROUP BY (PC.pcname, PC.phone)
      ORDER BY COUNT(C.cid) DESC
   )
   WHERE ROWNUM = 1;

   PCNAME                                                                           PHONE
   -------------------------------------------------------------------------------- --------------------
   IASTED International Conference on Artificial Intelligence and Applications      (557) 247-1698


   Justification:
   First, conference proceedings are selected. Then those Publishing Companies who published
   conference proceedings are selected. These rows are ordered by the number of items
   it has published. The top publisher is then reported.


8) List catalog items that were published in the same state that a user is from and
    has retrieved.

   SELECT R.catid, A.street, A.city, A.state
   FROM Located_at A, Publishes P, Retrieve R, Lives_at L
   WHERE R.pid = L.pid
   AND R.catid = P.catid
   AND A.pcid = P.pcid
   AND A.street = L.street
   AND A.city = L.city
   AND A.state = L.state;

   CATID      STREET                      CITY            STATE
   ---------- --------------------------- --------------- --------------------
   YZAQ6317   591-127 Id, Avenue          Dublin          Pennsylvania

   Justification:
   The address of a user is found by joining the pid of the retrieval of the user
   with the pid of the addresses lived at. Then the publishing company of that catalog
   item retreived is selected. Finally, the if the full address matches (street, city,
   and state) the row is a match and is reported.


9) Give the number of items written, edited, total and the names of the three persons who
   have contributed the highest number of catalog items.

   SELECT * FROM (
      SELECT temp.pname as Name, temp.Edits as Edits, COUNT(wp.catid) as Written,
                                                        (temp.Edits + COUNT(wp.catid)) as Total
      FROM (
         SELECT ep.pname, ep.pid, COUNT(E.catid) as Edits
         FROM Person ep
           LEFT OUTER JOIN Edits E ON E.pid = ep.pid
         GROUP BY (ep.pname, ep.pid)
           ) temp
      LEFT OUTER JOIN Writes wp ON temp.pid = wp.pid
      GROUP BY (temp.pname, temp.Edits)
      ORDER BY (temp.Edits + COUNT(wp.catid)) DESC
   )
   WHERE ROWNUM <= 3;

   NAME                                EDITS    WRITTEN      TOTAL
   ------------------------------ ---------- ---------- ----------
   Brandon Horton                          5          5         10
   Neil Knowles                            6          0          6
   Graiden Wilkins                         4          2          6

   Justification:
   In order to get the number of items written and number of items edited by the same person
   a double Left outer join was used. This ensures that even if a person didn't contribute in
   a catagory they are still represented with a 0. The resulting tally of edits and writes
   are added producing that person's total "contributions".


10) Give the title of the catalog item as well as the author, of the item that has been retrieved the most.

   COL title format a50

   SELECT B.btitle as "Title", temp.num as "Times Retrieved"
   FROM Book B,
   (
     SELECT * FROM (
       SELECT R.catid, COUNT(R.catid) as num
       FROM Retrieve R
       GROUP BY R.catid
       ORDER BY COUNT(R.catid) DESC
     )
     WHERE ROWNUM = 1
   ) temp
   WHERE temp.catid = B.bid
   UNION
   SELECT M.mtitle as "Title", temp.num as "Times Retrieved"
   FROM Magazine M,
   (
     SELECT * FROM (
       SELECT R.catid, COUNT(R.catid) as num
       FROM Retrieve R
       GROUP BY R.catid
       ORDER BY COUNT(R.catid) DESC
     )
     WHERE ROWNUM = 1
   ) temp
   WHERE temp.catid = M.mid
   UNION
   SELECT J.jtitle as "Title", temp.num as "Times Retrieved"
   FROM Journal J,
   (
     SELECT * FROM (
       SELECT R.catid, COUNT(R.catid) as num
       FROM Retrieve R
       GROUP BY R.catid
       ORDER BY COUNT(R.catid) DESC
     )
     WHERE ROWNUM = 1
   ) temp
   WHERE temp.catid = J.jid
   UNION
   SELECT C.cptitle as "Title", temp.num as "Times Retrieved"
   FROM Conference_proceedings C,
   (
     SELECT * FROM (
       SELECT R.catid, COUNT(R.catid) as num
       FROM Retrieve R
       GROUP BY R.catid
       ORDER BY COUNT(R.catid) DESC
     )
     WHERE ROWNUM = 1
   ) temp
   WHERE temp.catid = C.cid;

   Title                                                      Times Retrieved
   ---------------------------------------------------------- ---------------
   Iterated mutation in an evolutionary algorithm for Sudoku                6

   Justification:
   Each of the types of catalog items need to be queried individually to determine the
   type that was retrieved the most. To do so, the retrievals are grouped by catid
   and then taken a count of. The results are then selected and the one with the most number
   of retrievals is reported.


Stored Procedures
--------------------------

1) Find the username, email, and name of user's whose subscription has expired.

   SET SERVEROUTPUT ON
   COL sid FORMAT A15
   COL slen FORMAT 999
   COL begin_date FORMAT A15
   COL fee FORMAT A10

   CREATE OR REPLACE PROCEDURE emailExpiredUsers
   AS
   name VARCHAR(30);
   username VARCHAR(30);
   contact VARCHAR(50);

   CURSOR findUsers IS SELECT P.pname, U.uname, P.email
                       FROM Creates C, Person P, Users U, Subscription S
                       WHERE C.pid = P.pid AND
                             U.pid = P.pid AND
                             C.sid = S.sid AND
                             ADD_MONTHS(S.begin_date, S.slen) < (SELECT SYSDATE
                                                                 FROM DUAL);
   BEGIN
     DBMS_OUTPUT.PUT_LINE('Searching for users to contact about updating Subscriptions:');
     OPEN findUsers;
     LOOP
       FETCH findUsers INTO name, username, contact;
       IF findUsers%NOTFOUND THEN
         EXIT;
       END IF;
         DBMS_OUTPUT.PUT_LINE('Contact [' || name || '] details:');
         DBMS_OUTPUT.PUT_LINE('-   username: ' || username);
         DBMS_OUTPUT.PUT_LINE('-   email:    ' || contact);
     END LOOP;
     CLOSE findUsers;
     DBMS_OUTPUT.PUT_LINE('End of oudated Subscriptions!');
   END;
   /

   EXEC emailExpiredUsers();

   Verify ADD_MONTHS works as expected.
   SELECT ADD_MONTHS(S.begin_date, S.slen), S.begin_date, S.slen
   FROM Subscription S;

   Verify ADD_MONTHS works as expected.
   SELECT ADD_MONTHS(S.begin_date, S.slen), S.begin_date, S.slen
   FROM Subscription S;

   Output:
   SQL> @p1

   Procedure created.

   Searching for users to contact about updating Subscriptions:
   Contact [Donald O. Hamnes] details:
   -   username: dhamnes
   -   email:    dohamnes@stcloudstate.edu
   Contact [Bertha Santos] details:
   -   username: bsantos
   -   email:    porta.elit@blanditat.org
   Contact [Barbara Page] details:
   -   username: bpage
   -   email:    erat.Etiam@mollis.edu
   End of oudated Subscriptions!

   PL/SQL procedure successfully completed.

   SQL>

   Justification:
   To contact users about extending their subscriptions we need to have an email address,
   a name; to personalize the email, and a username; to remind the user of their credentials.
   Users to contact are users which have expired subscriptions. These are found with Oracle's
   ADD_MONTHS function which determines the subscription end date by adding the subscription
   duration to the subscription start date. We fetch all tuples where the the end date is
   less than the current system date (Oracle SYSDATE).


2) View or Retieve for a catalog item. Then update the search|retrieve table.

   SET SERVEROUTPUT ON
   
   CREATE OR REPLACE PROCEDURE Retrieve_item (user_id IN char, search_title IN char) AS
   
   item_title varchar2(100);
   item_found varchar2(10);
   content varchar2(200);
   user_found int;
   view_num int;
   u_id int;
   CURSOR m_id IS SELECT M.mtitle, M.mid, M.content
                  FROM Magazine M
                  WHERE M.mtitle = search_title;
   
   CURSOR j_id IS SELECT J.jtitle, J.jid, J.content
                  FROM Journal J
                  WHERE J.jtitle = search_title;
   
   CURSOR b_id IS SELECT B.btitle, B.bid, B.content
                  FROM Book B
                  WHERE B.btitle = search_title;
   
   CURSOR c_id IS SELECT CP.cptitle, CP.cid, CP.content
                  FROM Conference_proceedings CP
                  WHERE CP.cptitle = search_title;
   
   BEGIN
     DBMS_OUTPUT.PUT_LINE('Search for title: [' || search_title || '] from Catalog Items.');
     DBMS_OUTPUT.PUT_LINE('Searching...');
     OPEN m_id;
     LOOP
         FETCH m_id INTO item_title, item_found, content;
         IF m_id%NOTFOUND THEN
             EXIT;
         END IF;
     END LOOP;
     CLOSE m_id;
   
     OPEN j_id;
     LOOP
         FETCH j_id INTO item_title, item_found, content;
         IF j_id%NOTFOUND THEN
             EXIT;
         END IF;
     END LOOP;
     CLOSE j_id;
   
     OPEN b_id;
     LOOP
         FETCH b_id INTO item_title, item_found, content;
         IF b_id%NOTFOUND THEN
             EXIT;
         END IF;
     END LOOP;
     CLOSE b_id;
   
     OPEN c_id;
     LOOP
         FETCH c_id INTO item_title, item_found, content;
         IF c_id%NOTFOUND THEN
             EXIT;
         END IF;
     END LOOP;
     CLOSE c_id;
   
     SELECT COUNT(U.uname) INTO user_found FROM Users U WHERE U.uname = user_id;
   
   
     IF user_found = 0 THEN
         DBMS_OUTPUT.PUT_LINE(user_id || ' is not a validated User');
         DBMS_OUTPUT.PUT_LINE('Found ' || item_found || '!');
         DBMS_OUTPUT.PUT_LINE('No content will be displayed');
   
         SELECT vid INTO view_num FROM (SELECT vid FROM Viewer ORDER BY vid DESC) WHERE ROWNUM = 1;
         INSERT INTO Viewer (vid) VALUES (view_num+5);
         INSERT INTO Search (vid,catid) VALUES (view_num+5,item_found);
         COMMIT;
     ELSE
         SELECT U.pid INTO u_id FROM Users U WHERE U.uname = user_id;
   
         DBMS_OUTPUT.PUT_LINE('User ' || user_id || ' validated');
         DBMS_OUTPUT.PUT_LINE('Found ' || item_found || '!');
         DBMS_OUTPUT.PUT_LINE('Displaying content:');
         DBMS_OUTPUT.PUT_LINE(content);
   
         INSERT INTO Retrieve (pid,catid,r_date) VALUES (u_id,item_found,to_char(sysdate, 'dd-mon-yyyy'));
         COMMIT;
     END IF;
   
     DBMS_OUTPUT.PUT_LINE('End of Search!');
   END;
   /
   
   exec Retrieve_item('dhamnes','The Old Man and the Sea');
   exec Retrieve_item('tolson','The Old Lady Who Swallowed a Fly');

   Search for title: [The Old Man and the Sea] from Catalog Items.
   Searching...
   User dhamnes validated
   Found SQXZ1306!
   Displaying content:
   The content of book: The Old Man...
   End of Search!

   PL/SQL procedure successfully completed.

   Search for title: [The Old Lady Who Swallowed a Fly] from Catalog Items.
   Searching...
   tolson is not a validated User
   Found IBNV2946!
   No content will be displayed
   End of Search!

   PL/SQL procedure successfully completed.

   Justification: First we use a curson to get the titles and catid's of books. Then we check to validate 
   the person accessing the database is a validated user. If they are, the title of the book will be 
   displayed but the content will not. Otherwise, it will display the content. It will additionally
   insert into the searches and retrieves tables repsectively.

3) Display an article written by an author.

   create or replace PROCEDURE  Author_writes(author_name in char)as
   
   title varchar2(255);
   cat_id varchar2(255);
   
   cursor bfind is select b.btitle, b.bid
                   FROM Person P, Writes W, book b
                   WHERE P.pname = author_name
                   AND P.pid = W.pid                
                   AND W.catid = b.bid;
    
   cursor jfind is select j.jtitle, j.jid 
                   From Person P, Writes W, Journal j
                   WHERE P.pname = author_name
                   AND P.pid = W.pid          
                   AND W.catid = j.jid;  
                      
    
   cursor mfind is select m.mtitle, m.mid 
                   From Person P, Writes W, magazine m
                   WHERE P.pname = author_name
                   AND P.pid = W.pid          
                   AND W.catid = m.mid;  
   
   cursor cpfind is select cp.cptitle, cp.cid 
                    From Person P, Writes W, Conference_proceedings cp
                    WHERE P.pname = author_name
                    AND P.pid = W.pid
                    AND W.catid = cp.cid;  
                      
   BEGIN
     DBMS_OUTPUT.PUT_LINE('Search for author: [' || author_name || ']  in Database ');
     DBMS_OUTPUT.PUT_LINE('Searching...');
    
     OPEN bfind;
     LOOP
         FETCH bfind INTO title, cat_id;
         IF bfind%NOTFOUND THEN
             EXIT;
         END IF;
         dbms_output.put_line(' book Title:   '||title||' book ID:   '||cat_id  );
     END LOOP;
     CLOSE bfind;
     
     OPEN jfind;
     LOOP
         FETCH jfind INTO title, cat_id;
         IF  jfind%NOTFOUND THEN
             EXIT;
         END IF;
          dbms_output.put_line(' journal Title:   '||title||' journal ID:   '||cat_id  );
     END LOOP;
     CLOSE jfind;
   
     OPEN mfind;
     LOOP
         FETCH mfind INTO title, cat_id;
         IF  mfind%NOTFOUND THEN
             EXIT;
         END IF;
              dbms_output.put_line(' magazine Title:   '||title||' journal ID:   '||cat_id  );
     END LOOP;
     CLOSE mfind;
     
       OPEN cpfind;
     LOOP
         FETCH cpfind INTO title, cat_id;
         IF  cpfind%NOTFOUND THEN
             EXIT;
         END IF;
          dbms_output.put_line(' conference proceeding Title:   '||title||' conference proceeding ID:  '||cat_id  );
     END LOOP;
     CLOSE cpfind;
   
     DBMS_OUTPUT.PUT_LINE('End of Search!');
   END;
   /
   
   exec Author_writes('Alexa Thomas');
   exec Author_writes('Aspen Ayala');

   Search for author: [Alexa Thomas]  in Database
   Searching...
   book Title:   The Old Lady Who Swallowed a Fly book ID:   IBNV2946
   book Title:   Wuthering Heights book ID:   NJEQ6977
   book Title:   The Trial book ID:   HZLE2432
   magazine Title:   How is Bitcoin money journal ID:   HPNL1208
   magazine Title:   Can you change how you feel about money? journal ID:
   YQHH6457
   End of Search!

   PL/SQL procedure successfully completed.

   Search for author: [Aspen Ayala]  in Database
   Searching...
   journal Title:   Potential of Native Organic Feeding Stuffs in Poultry
   Production journal ID:   YZAQ6317
   journal Title:   Remarque en toy telle marque journal ID:   ERRZ8161
   End of Search!

   PL/SQL procedure successfully completed.

   Justification: In order to display the catalog items that an author has written we 
   first use a cursor to check for all of the items that were written by the author name.
   Then as going through the cursor, every match is printed out.


4) Search through catalog items given a search term.

   SET SERVEROUTPUT ON
   COL mid FORMAT A8
   COL mtitle FORMAT A50
   COL jvol FORMAT 99
   COL content FORMAT A65

   CREATE OR REPLACE PROCEDURE searchCatalog(
     searchTerm IN char
   )
   AS
   id varchar2(10);
   CURSOR id_mag IS SELECT M.mid
                    FROM Magazine M
                    WHERE M.mtitle LIKE '%' || searchTerm ||'%';

   CURSOR id_jor IS SELECT J.jid
                    FROM Journal J
                    WHERE J.jtitle LIKE '%' || searchTerm ||'%';

   CURSOR id_bok IS SELECT B.bid
                    FROM Book B
                    WHERE B.btitle LIKE '%' || searchTerm ||'%';

   CURSOR id_con IS SELECT CP.cid
                    FROM Conference_proceedings CP
                    WHERE CP.cptitle LIKE '%' || searchTerm ||'%';
   BEGIN
     DBMS_OUTPUT.PUT_LINE('Search term: [' || searchTerm || '] running against Catalog Items.');
     DBMS_OUTPUT.PUT_LINE('Searching...');
     OPEN id_mag;
     LOOP
         FETCH id_mag INTO id;
         IF id_mag%NOTFOUND THEN
             EXIT;
         END IF;
         DBMS_OUTPUT.PUT_LINE('-    Magazine:   ' || id);
     END LOOP;
     CLOSE id_mag;

   OPEN id_jor;
   LOOP
       FETCH id_jor INTO id;
       IF id_jor%NOTFOUND THEN
           EXIT;
       END IF;
       DBMS_OUTPUT.PUT_LINE('-    Journal:    ' || id);
   END LOOP;
   CLOSE id_jor;

   OPEN id_bok;
   LOOP
       FETCH id_bok INTO id;
       IF id_bok%NOTFOUND THEN
           EXIT;
       END IF;
       DBMS_OUTPUT.PUT_LINE('-    Book:       ' || id);
   END LOOP;
   CLOSE id_bok;

     OPEN id_con;
     LOOP
         FETCH id_con INTO id;
         IF id_con%NOTFOUND THEN
             EXIT;
         END IF;
         DBMS_OUTPUT.PUT_LINE('-    Conference: ' || id);
     END LOOP;
     CLOSE id_con;
     DBMS_OUTPUT.PUT_LINE('End of Search!');
   END;
   /

   EXEC searchCatalog('Canada');
   EXEC searchCatalog('Bitcoin');
   EXEC searchCatalog('The Trial');
   EXEC searchCatalog('software');
   EXEC searchCatalog('of');

   Output:
   SQL> @p4.sql

   Procedure created.

   Search term: [Canada] running against Catalog Items.
   Searching...
   -    Magazine:  RYMF2195
   End of Search!

   PL/SQL procedure successfully completed.

   Search term: [Bitcoin] running against Catalog Items.
   Searching...
   -    Magazine:  HPNL1208
   End of Search!

   PL/SQL procedure successfully completed.

   Search term: [The Trial] running against Catalog Items.
   Searching...
   -    Book:      HZLE2432
   End of Search!

   PL/SQL procedure successfully completed.

   Search term: [software] running against Catalog Items.
   Searching...
   -    Conference: ITCL7144
   End of Search!

   PL/SQL procedure successfully completed.

   Search term: [of] running against Catalog Items.
   Searching...
   -    Journal:    YZAQ6317
   -    Journal:    ZNMF0012
   -    Journal:    NSYD3340
   -    Journal:    NPPH3852
   -    Book:       QEDL4413
   -    Conference: IXNJ8371
   -    Conference: ITCL7144
   End of Search!

   PL/SQL procedure successfully completed.

   SQL>

   Justification:
   If a particular catalog user desires to search for a catalog ID given a search
   string. These search strings are compared to titles, and the ID is returned.
   Searching is done with use of the LIKE operator and the modulus (%) string operator
   that allows for partial matching in a LIKE clause. Encapsulating the search string
   within two moduli, is the principle operation in the procedure which allows partial
   matches.

5) Display the catalog item title and catid of items whose contract is going to expire within 30 days.

   create or replace PROCEDURE EXPIRE_DATE 
   
   AS
   
   f_title VARCHAR(255);
   idd varchar(255);
   
                       
   cursor findbook is select b.btitle,b.bid from book b ,catalog_item C
                       where c.catid =b.bid and contract_term < sysdate+30;
                       
   cursor findjournal is select j.jtitle ,j.jid from journal j,catalog_item C
                       where j.jid = c.catid and contract_term < sysdate+30;
                       
   cursor findmagazine is select m.mtitle, m.mid  from magazine m,catalog_item C
                       where c.catid = m.mid and contract_term < sysdate+30;
                       
   cursor findcp is select cp.cptitle,cp.cid from Conference_proceedings cp,catalog_item C
                       where cp.cid = c.catid and contract_term < sysdate+30;
                   
   BEGIN
     DBMS_OUTPUT.PUT_LINE('Search  near expiring catalogue inventory');
     DBMS_OUTPUT.PUT_LINE('Searching...');
     OPEN findbook;
     LOOP
         FETCH findbook INTO f_title,idd;
         IF findbook%NOTFOUND THEN
             EXIT;
         END IF;
         DBMS_OUTPUT.PUT_LINE('    book:   ' || f_title);
          DBMS_OUTPUT.PUT_LINE(' Catalog id:'||idd);
     END LOOP;
     CLOSE findbook;
   
     OPEN findjournal;
     LOOP
         FETCH findjournal INTO f_title,idd;
         IF findjournal%NOTFOUND THEN
             EXIT;
         END IF;
         DBMS_OUTPUT.PUT_LINE('     Journal:      ' ||f_title);
          DBMS_OUTPUT.PUT_LINE('    Catalog id:   '||idd);
     END LOOP;
     CLOSE findjournal;
   
     OPEN findmagazine ;
     LOOP
              FETCH findmagazine INTO f_title,idd;
         IF findmagazine%NOTFOUND THEN
             EXIT;
         END IF;
         DBMS_OUTPUT.PUT_LINE('    magazine:      ' || f_title);
        DBMS_OUTPUT.PUT_LINE('     Catalog id:    '||idd);
     END LOOP;
     CLOSE findmagazine ;
   
     OPEN  findcp;
     LOOP
         FETCH  findcp INTO f_title,idd;
         IF  findcp%NOTFOUND THEN
             EXIT;
         END IF;
         DBMS_OUTPUT.PUT_LINE('    Conference proceeding: ' || f_title);
      DBMS_OUTPUT.PUT_LINE   ('    Catalog id:            '||idd);
     END LOOP;
     CLOSE  findcp;
     DBMS_OUTPUT.PUT_LINE('End of Search!');
   END;
   /
   
   exec expire_date;
   
   Search  near expiring catalogue inventory
   Searching...
   book:   Wuthering Heights
   Catalog id:NJEQ6977
   book:   The Bell Jar
   Catalog id:VMGS7843
   Journal:      Water the Epic Struggle for Wealth, Power, and Civilization
   Catalog id:   ABIQ2755
   Journal:      The Role of Time and Time Perspective
   Catalog id:   ZNMF0012
   End of Search!
   
   PL/SQL procedure successfully completed.

   Justification: This procedure checks for the item in catalog and which is 
   going to expire in 30 days and also show the items that are already expired.
   And displays the title, catalog id and says whether it's a book or journal
   or magazine or conference preceeding.


6) Allow an author to submit work.

   SET SERVEROUTPUT ON

   CREATE OR REPLACE PROCEDURE addWork(
     author_pid IN NUMBER,
     editor_pid IN NUMBER,
     ref_catid  IN CHAR,
     pub_pcid   IN NUMBER,
     new_catid  IN CHAR,
     pub_type   IN CHAR,
     new_title  IN CHAR,
     new_cont   IN CHAR,
     new_vol    IN CHAR
   )
   AS
   author_flag INT;
   editor_flag INT;
   catid_flag  INT;
   ref_flag    INT;
   pub_flag    INT;
   BEGIN
     SELECT COUNT(A.pid)    INTO author_flag FROM Author A WHERE A.pid = author_pid;
     SELECT COUNT(E.pid)    INTO editor_flag FROM Editor E WHERE E.pid = editor_pid;
     SELECT COUNT(C.catid)  INTO ref_flag    FROM Catalog_item C WHERE C.catid = ref_catid;
     SELECT COUNT(Pub.pcid) INTO pub_flag    FROM Publishing_Company Pub WHERE Pub.pcid = pub_pcid;
     SELECT COUNT(C.catid)  INTO catid_flag  FROM Catalog_item C WHERE C.catid = new_catid;

     IF (author_flag = 0) THEN
       DBMS_OUTPUT.PUT_LINE('Invalid Author: ' || author_pid || ' cannot continue!');
       RETURN;
     END IF;

     IF (editor_flag = 0) THEN
       DBMS_OUTPUT.PUT_LINE('Invalid Editor: ' || editor_pid || ' cannot continue!');
       RETURN;
     END IF;

     IF (catid_flag = 1) THEN
       DBMS_OUTPUT.PUT_LINE('New Catalog ID already exists: ' || new_catid || ' cannot continue!');
       RETURN;
     END IF;

     IF (ref_flag = 0) THEN
       DBMS_OUTPUT.PUT_LINE('Invalid Referenceing Catalog ID: ' || ref_catid || ' cannot continue!');
       RETURN;
     END IF;

     IF (pub_flag = 0) THEN
       DBMS_OUTPUT.PUT_LINE('Invalid Publishing Company: ' || pub_pcid || ' cannot continue!');
       RETURN;
     END IF;

     INSERT INTO Catalog_item (catid,contract_term,type) VALUES (new_catid,SYSDATE+36500,pub_type);
     INSERT INTO Writes (catid,pid) VALUES (new_catid,author_pid);
     INSERT INTO Edits  (catid,pid) VALUES (new_catid,editor_pid);
     INSERT INTO Publishes (catid,pcid,publish_date) VALUES (new_catid,pub_pcid,SYSDATE);
     INSERT INTO Reference (catid,cite_id) VALUES (new_catid,ref_catid);

     IF (pub_type = 'Conference_proceedings') THEN
       INSERT INTO Conference_proceedings VALUES (new_catid,new_title,new_cont);
     END IF;
     IF (pub_type = 'Book') THEN
       INSERT INTO Book VALUES (new_catid,new_title,new_vol,new_cont);
     END IF;
     IF (pub_type = 'Magazine') THEN
       INSERT INTO Magazine VALUES (new_catid,new_title,new_vol,new_cont);
     END IF;
     IF (pub_type = 'Journal') THEN
       INSERT INTO Journal VALUES (new_catid,new_title,new_vol,new_cont);
     END IF;

     DBMS_OUTPUT.PUT_LINE('The ' || pub_type || ' has been added to the Database!');
     DBMS_OUTPUT.PUT_LINE('-    CATID:   ' || new_catid);
     DBMS_OUTPUT.PUT_LINE('-    Author:  ' || author_pid);
     DBMS_OUTPUT.PUT_LINE('-    Title:   ' || new_title);
     DBMS_OUTPUT.PUT_LINE('-    Content: ' || new_title);
     DBMS_OUTPUT.PUT_LINE('-    Edition: ' || new_vol);
     DBMS_OUTPUT.PUT_LINE('-    Editor:  ' || editor_pid);
     DBMS_OUTPUT.PUT_LINE('-    Ref:     ' || ref_catid);

   END;
   /

   EXEC  addWork(118, 108, 'BKGN1857', 45671, 'ILBA3245', 'Book', 'The Hobbit', 'In a hole in the ground there lived a hobbit', 1);
   EXEC  addWork(118, 345, 'BKGN1857', 45671, 'ILBA3245', 'Book', 'The Hobbit', 'In a hole in the ground there lived a hobbit', 1);
   EXEC  addWork(118, 107, 'BKGN1857', 45671, 'ILBA3245', 'Book', 'The Hobbit', 'In a hole in the ground there lived a hobbit', 1);

   SQL> @p6

   Procedure created.

   The Book has been added to the Database!
   -    CATID:   ILBA3245
   -    Author:  118
   -    Title:   The Hobbit
   -    Content: The Hobbit
   -    Edition: 1
   -    Editor:  108
   -    Ref:     BKGN1857

   PL/SQL procedure successfully completed.

   Invalid Editor: 345 cannot continue!

   PL/SQL procedure successfully completed.

   New Catalog ID already exists: ILBA3245 cannot continue!

   PL/SQL procedure successfully completed.

   SQL>

   SELECT DISTINCT C.catid, B.btitle
   FROM Author A, Editor E, Catalog_item C,
        Publishing_Company Pub, Reference R, Book B
   WHERE A.pid     = 118 AND
         E.pid     = 108 AND
         R.cite_id = 'BKGN1857' AND
         C.catid   = 'ILBA3245' AND
         B.btitle  = 'The Hobbit';

   CATID      BTITLE
   ---------- ----------------------------------------
   ILBA3245   The Hobbit

   Justification:
   To add entries to the database we have to do some verification. It is important
   to verify the author, editors, reference, and publishing companies. We must also
   make sure that the new catalog ID does not exist. To efficiently error check input
   parameters we select a COUNT of the instances, this results in a boolean value.
   After we do error checking for this all of the values are then added to the Database.

7) Remove a catalog item from the database whose contract has expired.

   COL contract_term FORMAT A13

   SELECT C.catid, C.contract_term
   FROM Catalog_item C
   WHERE C.contract_term < (SELECT SYSDATE
                            FROM DUAL);

   CREATE OR REPLACE PROCEDURE deletePastTerm
   AS
   BEGIN
   DELETE FROM Catalog_item C
   WHERE C.contract_term < (SELECT SYSDATE
                            FROM DUAL);
   END;
   /

   EXEC deletePastTerm();

   SELECT C.catid, C.contract_term
   FROM Catalog_item C
   WHERE C.contract_term < (SELECT SYSDATE
                            FROM DUAL);

   Output:
   SQL> @p7

   CATID      CONTRACT_TERM
   ----- -------------
   NJEQ6977   25-JAN-05
   ABIQ2755   03-JUL-12
   VMGS7843   22-MAY-11
   ZNMF0012   02-NOV-16


   Procedure created.


   PL/SQL procedure successfully completed.


   no rows selected

   SQL>

   Justification:
   This procedure finds the catid of Catalog_item's that have expired. Expiration
   is defined as contract_terms that are less than the Oracle SYSDATE (current date).
   The procedure then deletes all items that are less than the current date. The
   procedure is not very complex because of ON DELETE CASCADE, which was added to
   tables; Journal, Magazine, Book, Conference_proceedings, Reference, Search,
   Retrieve, Writes, Edits, and Publishes. A single DELETE FROM Catalog_item will
   remove these entries, thanks to our table design.

8) Update a user's email address.

   SET SERVEROUTPUT ON
   COL pid FORMAT 999
   COL pname FORMAT A20
   COL uname FORMAT A12
   COL email FORMAT A40

   SELECT *
   FROM Person P
   WHERE P.pid = 120 OR
         P.pid = 108 OR
         P.pid = 117 OR
         P.pid = 125;

   CREATE OR REPLACE PROCEDURE changeEmail(
     username IN char,
     newEmail IN char
   )
   AS
   BEGIN
   UPDATE Person P
   SET P.email = newEmail
   WHERE P.pid = (SELECT U.pid
                  FROM Users U
                  WHERE U.uname = username);
   END;
   /

   EXEC changeEmail('jwheeler', '18wheelerLover@gmail.com');
   EXEC changeEmail('rharper', 'reeses-pieces@mars.com');
   EXEC changeEmail('tshelton', 'eaglesTalon@birdwatcher.mn');
   EXEC changeEmail('bpage', 'turningAnotherPage@yahoo.com');

   SELECT *
   FROM Person P
   WHERE P.pid = 120 OR
         P.pid = 108 OR
         P.pid = 117 OR
         P.pid = 125;

   Output:
   SQL> @p8.sql

    PID PNAME                EMAIL
   ---- -------------------- ----------------------------------------
    108 Reese Harper         magna.Nam@metus.co.uk
    117 Talon Shelton        molestie.sodales@Proinnonmassa.com
    120 Jacob Wheeler        quam.a.felis@morbitristiquesenectus.ca
    125 Barbara Page         erat.Etiam@mollis.edu


   Procedure created.


   PL/SQL procedure successfully completed.


   PL/SQL procedure successfully completed.


   PL/SQL procedure successfully completed.


   PL/SQL procedure successfully completed.


    PID PNAME                EMAIL
   ---- -------------------- ----------------------------------------
    108 Reese Harper         reeses-pieces@mars.com
    117 Talon Shelton        eaglesTalon@birdwatcher.mn
    120 Jacob Wheeler        18wheelerLover@gmail.com
    125 Barbara Page         turningAnotherPage@yahoo.com

   SQL>

   Justification:
   This procedure changes a value in the Person table, email. It takes in a username
   from the Users table. We SELECT the user's pid that joins to a pid in person,
   which is where emails are located. From this point we know that we have identified
   a user's email based on their username, after that an UPDATE statement changes the
   email.

9) Update a user's subscription status (the user extends this period).

   SELECT U.uname, S.begin_date, S.slen
   FROM Users U, Subscription S, Creates C
   WHERE U.pid = C.pid AND
         S.sid = C.sid;

   CREATE OR REPLACE PROCEDURE updateSubsciption(
     username IN char,
     months   IN number
   )
   AS
   BEGIN
   UPDATE Subscription S
   SET S.begin_date = ADD_MONTHS(S.begin_date, S.slen),
       S.slen = months
   WHERE S.sid = (SELECT C.sid
                  FROM Creates C, Users U
                  WHERE U.pid = C.pid AND
                        U.uname = username);
   END;
   /

   EXEC updateSubsciption('tshelton', 6);
   EXEC updateSubsciption('omartinez', 6);
   EXEC updateSubsciption('gwilkins', 12);
   EXEC updateSubsciption('vholder', 9);
   EXEC updateSubsciption('bsantos', 1);
   EXEC updateSubsciption('tshelton', 6);

   SELECT U.uname, S.begin_date, S.slen
   FROM Users U, Subscription S, Creates C
   WHERE U.pid = C.pid AND
         S.sid = C.sid;

   Output:
   SQL> @p9

   UNAME        BEGIN_DATE      SLEN
   ------------ --------------- ----
   gwilkins     19-NOV-19         12
   rharper      19-APR-19         23
   tshelton     23-SEP-23         12
   dhamnes      10-JUN-10          3
   jwheeler     24-MAY-24          2
   vholder      21-JAN-21          8
   bsantos      05-JAN-05         18
   bpage        07-SEP-07         12
   ipeterson    31-AUG-31          8
   omartinez    27-OCT-27         12

   10 rows selected.


   Procedure created.


   PL/SQL procedure successfully completed.


   PL/SQL procedure successfully completed.


   PL/SQL procedure successfully completed.


   PL/SQL procedure successfully completed.


   PL/SQL procedure successfully completed.


   PL/SQL procedure successfully completed.


   UNAME        BEGIN_DATE      SLEN
   ------------ --------------- ----
   gwilkins     19-NOV-20         12
   rharper      19-APR-19         23
   tshelton     23-MAR-25          6
   dhamnes      10-JUN-10          3
   jwheeler     24-MAY-24          2
   vholder      21-SEP-21          9
   bsantos      05-JUL-06          1
   bpage        07-SEP-07         12
   ipeterson    31-AUG-31          8
   omartinez    27-OCT-28          6

   10 rows selected.

   SQL>

   Justification:
   To update a user's subscription we need to conform to our standard of using a
   start time attribute and months of subscription purchased. Using Oracle's
   ADD_MONTHS function we can make use of our schema for updating times. We use an
   UPDATE statement and set the 'new' begin date to the old subscription date with
   the duration added. We then assign the new months purchased to the slen. This
   procedure is very expendable and robust.


10) Delete a person by id if they are not author.

   create or replace TRIGGER UserDelete
       AFTER DELETE
       ON Users
       FOR EACH ROW
   DECLARE
       refs number;
   BEGIN
       -- Check if  author is found.
       SELECT count(*) INTO refs
           FROM Person P, Author A
           WHERE P.pid = A.pid
           AND P.pid = :OLD.pid;
   
   
       IF refs = 0 THEN
           DELETE FROM Person P
               WHERE P.pid = :OLD.pid;
       END IF;
   END;
   
   SQL> select pname from person;
   
   PNAME
   ------------------------------
   Graiden Wilkins
   Brandon Horton
   Drew Lott
   Michelle Farley
   Reese Harper
   Talon Shelton
   Donald O. Hamnes
   Stephanie Gordon
   Jacob Wheeler
   Victoria Holder
   Aspen Ayala
   
   PNAME
   ------------------------------
   Melissa Hernandez
   Bertha Santos
   Barbara Page
   Iliana Peterson
   Conan Johns
   Candice Clemons
   Patricia Curtis
   Neil Knowles
   Olga Martinez
   Upton Booker
   Alyssa Gilmore
   
   PNAME
   ------------------------------
   Logan Oneil
   Bryant A. Julstrom
   Yolanda Glover
   Charity Stevens
   Allen Carr
   Alexa Thomas
   Bobby George
   
   29 rows selected.
   
   SQL> @p10
   
   Trigger created.
   
   SQL> delete from users where pid=200;
   
   1 row deleted.
   
   SQL> select pname from person;
   
   PNAME
   ------------------------------
   Graiden Wilkins
   Brandon Horton
   Drew Lott
   Michelle Farley
   Reese Harper
   Talon Shelton
   Donald O. Hamnes
   Stephanie Gordon
   Jacob Wheeler
   Victoria Holder
   Aspen Ayala
   
   PNAME
   ------------------------------
   Melissa Hernandez
   Bertha Santos
   Barbara Page
   Iliana Peterson
   Conan Johns
   Candice Clemons
   Patricia Curtis
   Neil Knowles
   Olga Martinez
   Upton Booker
   Alyssa Gilmore
   
   PNAME
   ------------------------------
   Logan Oneil
   Bryant A. Julstrom
   Yolanda Glover
   Charity Stevens
   Allen Carr
   Alexa Thomas
   
   28 rows selected.

   Justification: This triggers checks for the person who is user only not the author by PID.
   Once the condition is  satisfied then the user is deleted form database otherwise the 
   user cannot be deleted.